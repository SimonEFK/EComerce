@model CategoryInfoViewModel
<div class="row">
    <div class="col-sm-4" id="cateInfoDiv">
        <form method="post" action="/Administration/CategoryManagment/EditCategory/@Model.CategoryInfoModel.Id">
            <div class="mb-3">

                <div class="d-flex">
                    <span asp-validation-for="@Model.CategoryInfoModel.CategoryName" class="text-danger"></span>
                    <input readonly value="@Model.CategoryInfoModel.CategoryName" asp-for="@Model.CategoryFormModel.Name" name="Model.Name" class="form-control" />
                    <button type="button" class="btn btn-outline-info">Edit</button>
                </div>
                <div class="d-flex">
                    <span asp-validation-for="@Model.CategoryInfoModel.ImageFilePath" class="text-danger"></span>
                    <input readonly value="@Model.CategoryInfoModel.ImageFilePath" asp-for="@Model.CategoryFormModel.ImageFilePath" name="Model.Image.FilePath" class="form-control" />
                    <button type="button" class="btn btn-outline-info">Edit</button>
                </div>
                <div class="d-flex">
                    <span asp-validation-for="@Model.CategoryInfoModel.ImageUrl" class="text-danger"></span>
                    <input readonly value="@Model.CategoryInfoModel.ImageUrl" asp-for="@Model.CategoryFormModel.ImageUrl" name="Model.ImageUrl" class="form-control" />
                    <button type="button" class="btn btn-outline-info">Edit</button>
                </div>
            </div>
            <button class="btn btn-outline-success">Apply Changes</button>
        </form>

    </div>
</div>
<div class="row">
    <h3>Specifications</h3>
    <div class="col-md-4">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">Filter</th>
                    <th scope="col">Info Level</th>
                    <th scope="col">Manage</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.CategoryInfoModel.Specifications)
                {
                    <tr>
                        <th scope="row">@item.SpecificationId</th>
                        <td>@item.Name</td>
                        <td>@item.Filter</td>
                        <td>@item.InfoLevel</td>
                        <td>
                            <button class="btn btn-outline-info">Edit</button>
                        </td>
                    </tr>

                }

            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-4" id="specDiv">
        <button id="getFormBtn" class="btn btn-outline-primary">Add</button>
    </div>
</div>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script>

        let specDiv = document.querySelector('#specDiv');
        specDiv.addEventListener('click', SubmitSpecForm);
        let getFormBtn = document.querySelector('#getFormBtn')
        getFormBtn.addEventListener('click', GetSpecForm);

        async function GetSpecForm(event) {
            const url = `https://localhost:7082/Administration/CategoryManagment/CreateSpecification/`;
            debugger;
            let response = await fetch(url, { method: "GET" });
            let html = await response.text();
            specDiv.append(new DOMParser().parseFromString(html, 'text/html').body.firstChild);

        }

        async function SubmitSpecForm(event) {
            if (event.target.matches('button#submitBtn')) {
                event.preventDefault();
                let form = document.querySelector('#specForm');
                $.validator.unobtrusive.parse(form);

                if ($(form).valid()) {
                    specDiv.innerHTML = "";
                    let categoryId = @Model.CategoryInfoModel.Id;
                    const url = `https://localhost:7082/Administration/CategoryManagment/CreateSpecification/${categoryId}`
                    let formData = new FormData(form);
                    let response = await fetch(url, {
                        method: "POST",
                        body: formData
                    })

                    if (response.ok) {
                        location.reload();
                    } 
                    let html = await response.text();
                    specDiv.append(new DOMParser().parseFromString(html, 'text/html').body.firstChild);
                }
                // document.querySelector('input[name="__RequestVerificationToken"]').value;
                // formData.append("__RequestVerificationToken", token);

            }
        }

        let cateInfoDiv = document.querySelector('#cateInfoDiv');
        cateInfoDiv.addEventListener('click', ToggleInput);
        function ToggleInput(event) {
            let target = event.target;
            if (target.matches('button')) {
                // event.preventDefault();
                let input = target.closest('div').querySelector('input');
                input.toggleAttribute('readonly');

            }

        }
    </script>
}