@model EditProductInputModel;
<div class="row flex-column justify-content-center align-content-center">
    <div class="col">
        <form method="post" asp-area="Administration" asp-controller="ProductManagment" asp-action="EditProduct" asp-route-id="@Model.Id">
            <div class="row mb-3">
                <div class="col-lg-6">
                    <label asp-for="@this.Model.Name" class="form-label"></label>
                    <input asp-for="@this.Model.Name" placeholder="e.g. AMD Ryzen 7 7800X3D" class="form-control" />
                    <span asp-validation-for="@this.Model.Name" class="text-danger"></span>
                </div>
                <div class="col-lg-6">
                    <label asp-for="@this.Model.NameDetailed" class="form-label"></label>
                    <input asp-for="@this.Model.NameDetailed" placeholder="e.g. AMD Ryzen 7 7800X3D 4.2 GHz 8-Core Processor" class="form-control" />
                    <span asp-validation-for="@this.Model.NameDetailed" class="text-danger"></span>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <label asp-for="@this.Model.CategoryId"></label>
                    <select asp-for="@this.Model.CategoryId" class="form-select" id="categorySelectInputField">
                        <option>Select Category</option>
                        @foreach (var category in this.Model.CategoryList.OrderBy(x => x.Name))
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                    <span class="text-danger" asp-validation-for="@this.Model.CategoryId"></span>
                </div>
                <div class="col-lg-6">
                    <label asp-for="@this.Model.ManufacturerId"></label>
                    <select asp-for="@this.Model.ManufacturerId" class="form-select">
                        <option>Select Manufacturer</option>
                        @foreach (var manufacturer in this.Model.ManufacturerList.OrderBy(x => x.Name))
                        {
                            <option value="@manufacturer.Id">@manufacturer.Name</option>
                        }
                    </select>
                    <span class="text-danger" asp-validation-for="@this.Model.ManufacturerId"></span>

                </div>
            </div>
            <button type="submit" class="btn btn-primary">Apply</button>
        </form>
    </div>
    <div class="col">
        <div class="row">
            <span class="h3 text-center mb-3">Specifications</span>
            <div class="col">
                <div class="row">
                    <div class="col-md-6">
                        <select id="specificationsSelectMenu" class="form-select">
                            <option>Select Specification</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <select id="specValuesSelectMenu" class="form-select">
                            <option>Select Value</option>
                        </select>
                    </div>
                </div>
                <div class="d-flex my-3 justify-content-between">
                    <button id="addSpecBtn" type="button" class="btn btn-success">Add</button>
                    <a class="fs-6" asp-area="Administration" asp-controller="CategoryManagment" asp-action="CategoryInfo" asp-route-id="@Model.CategoryId">Add new values</a>
                </div>

                <div class="row my-3" id="specificationsRow">
                    <div class="col">
                        <div class="row row-gap-2">
                            @foreach (var specification in Model.Specifications)
                            {
                                <div class="col-lg-6">
                                    <input disabled class="form-control" placeholder="@specification.SpecificationName" />
                                </div>
                                <div class="col-lg-6">
                                    <div class="input-group flex-nowrap">
                                        <input disabled class="form-control" placeholder="@specification.ValueName" />
                                        <button data-removeSpecBtn="@specification.ValueId" class="btn btn-outline-danger">Remove</button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="row mb-3">
            <div class="col">
                <form method="post" asp-area="Administration" asp-controller="ProductManagment" asp-action="AddImage" asp-route-Id="@Model.Id">
                    <div class="input-group">
                        <input name="ImageUrl" class="form-control" type="text" placeholder="Image URL" />
                        <button class="btn btn-outline-primary">Add Image</button>
                    </div>
                </form>
            </div>
        </div>
        <div class="row" id="imageRow">
            @foreach (var image in Model.Images)
            {
                <div class="col-12 col-sm-6 col-md-3">
                    <div class="overflow-hidden d-flex justify-content-center align-items-center" style="height:300px;">
                        <img alt="img" src="@image.Url" class="img-fluid" style="max-height:300px" />
                    </div>
                    <button data-removeImageBtn="@image.Id" class="btn btn-outline-danger">Remove</button>
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {
    <script>
        let categoryInfo = {};

        window.addEventListener('load', UpdateSpecificationValues)
        document.querySelector('#imageRow').addEventListener('click', RemoveImage)
        document.querySelector('#specificationsRow').addEventListener('click', RemoveSpecification)
        document.querySelector('#addSpecBtn').addEventListener('click', AddSpecification)


        let categorySelectInputField = document.querySelector("#categorySelectInputField");
        let specificationsSelectMenu = document.querySelector('#specificationsSelectMenu');
        let specValuesSelectMenu = document.querySelector("#specValuesSelectMenu");

        categorySelectInputField.addEventListener("input", UpdateSpecificationValues);
        specificationsSelectMenu.addEventListener("input", UpdateValues);

        async function UpdateSpecificationValues(event) {


            let value = categorySelectInputField.value;
            let response = await fetch(`/administration/categorymanagment/categoryinfojson?categoryId=${value}`);
            categoryInfo = await response.json();

            specificationsSelectMenu.innerHTML = `<option>Select Specification</option>`;
            specValuesSelectMenu.innerHTML = `<option>Select Value</option>`;
            Array.from(categoryInfo.specifications).forEach(x => {

                let option = document.createElement('option')

                option.textContent = x.name;
                option.value = x.id;

                specificationsSelectMenu.appendChild(option);

            });
        }
        function UpdateValues(event) {

            let specId = specificationsSelectMenu.value;
            let specification = categoryInfo.specifications.filter(x => x.id == specId);
            specValuesSelectMenu.innerHTML = '';

            specification[0].values.forEach(x => {
                let option = document.createElement('option');
                option.textContent = x.value;
                option.value = x.id;
                option.dataset.specname = specification[0].name;
                option.dataset.valuename = x.value;
                specValuesSelectMenu.appendChild(option);

            })

        }

        async function RemoveSpecification(event) {
            event.preventDefault();
            let target = event.target;
            if (target.matches('button[data-removeSpecBtn]')) {
                let valueId = target.dataset["removespecbtn"];
                let productId = @Model.Id;
                let url = `/Administration/ProductManagment/RemoveSpecification/${productId}`;


                let formData = new FormData();
                var token = $('input[name="__RequestVerificationToken"]').val();
                formData.append('__RequestVerificationToken', token);
                formData.append('valueid', valueId);
                let options = {
                    'method': 'POST',
                    'body': formData
                }
                let response = await fetch(url, options);
                if (response.redirected) {
                    window.location.href = response.url;
                }

            }
        }
        async function RemoveImage(event) {
            event.preventDefault();
            let target = event.target;
            if (target.matches('button[data-removeImageBtn]')) {
                let imageId = target.dataset["removeimagebtn"];
                let productId = @Model.Id;
                let url = `/Administration/ProductManagment/RemoveImage/${productId}`;

                let formData = new FormData();
                var token = $('input[name="__RequestVerificationToken"]').val();
                formData.append('__RequestVerificationToken', token);
                formData.append('imageId', imageId);
                let options = {
                    'method': 'POST',
                    'body': formData
                }
                let response = await fetch(url, options);
                if (response.redirected) {
                    window.location.href = response.url;
                }

            }
        }
        async function AddSpecification(event) {
            event.preventDefault();

            let specValueSelectMenu = document.querySelector('#specValuesSelectMenu');
            let valueId = specValueSelectMenu.value;

            if (!valueId) {
                console.log("Invalid input");
                return
            };

            let productId = @Model.Id;
            let url = `/Administration/ProductManagment/AddSpecification/${productId}`;

            let formData = new FormData();
            var token = $('input[name="__RequestVerificationToken"]').val();
            formData.append('__RequestVerificationToken', token);
            formData.append('valueId', valueId);
            let options = {
                'method': 'POST',
                'body': formData
            }
            let response = await fetch(url, options);
            if (response.redirected) {
                window.location.href = response.url;
            }
        }
    </script>
} 