@using HardwareStore.App.Models.Product;
@using HardwareStore.App.Areas.Administration.Models;
@model CreateProductInputModel;

<div class="row justify-content-center align-content-center">
    <div class="col-md-12 col-lg-10 col-xl-8">
        <form method="post" asp-area="Administration" asp-controller="ProductManagment" asp-action="CreateProduct">
            <div class="row">
                <div class="col-md-6">
                    <label asp-for="@this.Model.Name" class="form-label"></label>
                    <input asp-for="@this.Model.Name" placeholder="e.g. AMD Ryzen 7 7800X3D" class="form-control" />
                    <span asp-validation-for="@this.Model.Name" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="@this.Model.NameDetailed" class="form-label"></label>
                    <input asp-for="@this.Model.NameDetailed" placeholder="e.g. AMD Ryzen 7 7800X3D 4.2 GHz 8-Core Processor" class="form-control" />
                    <span asp-validation-for="@this.Model.NameDetailed" class="text-danger"></span>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <label asp-for="@this.Model.Price" class="form-label"></label>
                    <input asp-for="@this.Model.Price" class="form-control" />
                    <span asp-validation-for="@this.Model.Price" class="text-danger"></span>
                </div>                
            </div>
            <div class="row my-2">
                <div class="col-md-6">
                    <select asp-for="@this.Model.CategoryId" class="form-select" id="categorySelectInputField">
                        <option>Select Category</option>
                        @foreach (var category in this.Model.CategoryList.OrderBy(x => x.Name))
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                    <span class="text-danger" asp-validation-for="@this.Model.CategoryId"></span>
                </div>
                <div class="col-md-6">
                    <select asp-for="@this.Model.ManufacturerId" class="form-select">
                        <option>Select Manufacturer</option>
                        @foreach (var manufacturer in this.Model.ManufacturerList.OrderBy(x => x.Name))
                        {
                            <option value="@manufacturer.Id">@manufacturer.Name</option>
                        }
                    </select>
                    <span class="text-danger" asp-validation-for="@this.Model.ManufacturerId"></span>

                </div>
            </div>
            <div class="row image-urlInput-container my-2">
                <div class="d-flex justify-content-between">
                    <p class="h3 m-0">Images</p>
                    <button class="btn btn-success" id="addImgBtn" type="button">Add Images</button>
                </div>
                <span class="text-danger d-block form-label" asp-validation-for="@Model.ImageUrls"></span>
                <div class="col-12 imageInputRow mb-1">
                    <div class="input-group">
                        <input asp-for="@this.Model.ImageUrls" class="form-control" placeholder="Url" value="@string.Empty" />
                        <button type="button" class="btn-close ms-2 position-absolute top-50 end-0 translate-middle-y"></button>
                    </div>
                </div>
            </div>
            <div class="row-cols-1">
                <div class="col">
                    <div class="d-flex align-items-center justify-content-between my-2">
                        <p class="h3 m-0">Specifications</p>
                        <a class="fs-5 text-decoration-none" target="_blank" asp-area="Administration" asp-controller="CategoryManagment" asp-action="Index">Add New Values</a>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <select id="specificationsSelectMenu" class="form-select">
                                <option>Select Specification</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <select id="specValuesSelectMenu" class="form-select">
                                <option>Select Value</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="specificationsBox">
                            </div>
                        </div>

                    </div>
                </div>
                <div class="d-flex justify-content-end">
                    <button id="addSpecBtn" type="button" class="btn btn-success">Add</button>
                </div>
            </div>
            <button class="btn btn-info" type="submit">Submit</button>
        </form>

    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let categoryInfo = {};
        window.addEventListener('load', UpdateSpecificationValues)

        let categorySelectInputField = document.querySelector("#categorySelectInputField");

        let specificationsSelectMenu = document.querySelector('#specificationsSelectMenu');
        let specValuesSelectMenu = document.querySelector("#specValuesSelectMenu");

        categorySelectInputField.addEventListener("input", ClearSpecificationValues);

        categorySelectInputField.addEventListener("input", UpdateSpecificationValues);
        categorySelectInputField.addEventListener("load", UpdateSpecificationValues);
        specificationsSelectMenu.addEventListener("input", UpdateValues);


        function ClearSpecificationValues() {
            debugger;
            let specificationBox = document.querySelector('.specificationsBox');
            specificationBox.innerHTML = "";
        }


        async function UpdateSpecificationValues(event) {
            let value = categorySelectInputField.value;
            let response = await fetch(`/administration/categorymanagment/categoryinfojson?categoryId=${value}`);
            categoryInfo = await response.json();

            specificationsSelectMenu.innerHTML = `<option>Select Specification</option>`;
            specValuesSelectMenu.innerHTML = `<option>Select Value</option>`;

            let specifications = Array.from(categoryInfo.specifications);
            specifications.forEach(x => {

                let option = document.createElement('option')

                option.textContent = x.name;
                option.value = x.id;

                specificationsSelectMenu.appendChild(option);

            });
        }
        function UpdateValues(event) {

            let specId = specificationsSelectMenu.value;
            let specification = categoryInfo.specifications.filter(x => x.id == specId);
            specValuesSelectMenu.innerHTML = '';

            specification[0].values.forEach(x => {
                let option = document.createElement('option');
                option.textContent = x.value;
                option.value = x.id;
                option.dataset.specname = specification[0].name;
                option.dataset.valuename = x.value;
                specValuesSelectMenu.appendChild(option);

            })


        }

        let imagesUrlInputContainer = document.querySelector('.image-urlInput-container');
        imagesUrlInputContainer.addEventListener('click', RemoveImageInputField);
        let imgBtn = document.querySelector('#addImgBtn');
        imgBtn.addEventListener('click', AddImageInputField);
        async function AddImageInputField(event) {

            event.preventDefault();
            let imageInputOriginal = document.querySelector('.imageInputRow');
            let clone = imageInputOriginal.cloneNode(true);
            clone.querySelector('input').value = "";
            imageInputOriginal.insertAdjacentElement("beforebegin", clone);

        };
        function RemoveImageInputField(event) {
            if (event.target.matches('.btn-close')) {
                let divToRemove = event.target.closest('.imageInputRow');
                let imageInputRowsCount = Array.from(document.querySelectorAll('.imageInputRow')).length;
                if (imageInputRowsCount == 1) {
                    return;
                }
                imagesUrlInputContainer.removeChild(divToRemove);
            }
        };


        let addSpecBtn = document.querySelector('#addSpecBtn');
        let specContainer = document.querySelector('.specificationsBox');
        addSpecBtn.addEventListener('click', AddSpecInputField);
        specContainer.addEventListener('click', RemoveSpecBox);
        async function AddSpecInputField(event) {

            let specificationsBox = document.querySelector('.specificationsBox');
            let specValueSelectMenu = document.querySelector('#specValuesSelectMenu');

            let specName = specValueSelectMenu.options[specValueSelectMenu.selectedIndex].dataset["specname"];
            let valueName = specValueSelectMenu.options[specValueSelectMenu.selectedIndex].dataset["valuename"];
            let valueId = specValueSelectMenu.value;
            if (!valueId || !specName) {
                console.log("Invalid input");
                return
            };
            let html =
                `
                                            <div class="d-flex align-items-center gap-2 mb-2 position-relative" data-spec-name-value>
                                                        <input required readonly value="${specName}" class="form-control" aria-invalid="false">
                                                                <input required readonly value="${valueName}" class="form-control" aria-invalid="false">
                                                        <input type="hidden" readonly readonly name="Specifications" value="${valueId}" class="form-control">
                                                <button type="button" class="btn-close position-absolute top-50 end-0 translate-middle-y"></button>
                                            </div>
                                            `;

            specContainer.insertAdjacentHTML('afterbegin', html);

        };
        function RemoveSpecBox(event) {
            if (event.target.matches('.btn-close')) {
                let divToRemove = event.target.closest('[data-spec-name-value]');
                specContainer.removeChild(divToRemove);
            }
        };

    </script>
}